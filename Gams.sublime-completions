{
        "scope": "source.gms",

        "completions":
        [
//Sets, Parameters, Variables etc.
                { "trigger": "set name /definition/;", "contents": "SET ${1:setname} /${2:definiton}/;" },
                { "trigger": "alias(x,xx);", "contents": "ALIAS ($1,$2);" },
                { "trigger": "scalar name //;", "contents": "SCALAR ${1:name} /${2:value}/"},
                { "trigger": "parameter", "contents": "PARAMETER $0;"},
                { "trigger": "table", "contents": "TABLE $1\n$2\n;" },
                { "trigger": "variable", "contents": "VARIABLE $0;" },
                { "trigger": "positive variable", "contents": "POSITIVE VARIABLE $0;" },
                { "trigger": "integer variable", "contents": "INTEGER VARIABLE $0;" },
                { "trigger": "negative variable", "contents": "NEGATIVE VARIABLE $0;" },
                { "trigger": "binary variable", "contents": "BINARY VARIABLE $0;" },
                { "trigger": "SOS1 variable", "contents": "SOS1 VARIABLE $0;" },
                { "trigger": "SOS2 variable", "contents": "SOS2 VARIABLE $0;" },
                { "trigger": "semicont variable", "contents": "SEMICONT VARIABLE $0;" },
                { "trigger": "semiint variable", "contents": "SEMIINT VARIABLE $0;" },
//Assignments
                ".lo",
                ".l",
                ".up",
                ".m",
//Model, Equation
                { "trigger": "equations", "contents": "EQUATIONS $0;" }, 
                { "trigger": "MODEL name /equations/;", "contents": "MODEL ${1:name} /${2:equations}/;" },
                { "trigger": "option", "contents": "OPTION $1 = $2;" }, 
                { "trigger": "solve", "contents": "SOLVE $1 USING $2;" },               
                "MINIMIZING",
                "MAXIMIZING",
                "LP",
                "QCP",
                "NLP",
                "DNLP",
                "MIP",
                "RMIP",
                "MIQCP",
                "RMIQCP",
                "MINLP",
                "RMINLP",
                "MCP",
                "MPEC",
                "RMPEC",
                "CNS",
                "EMP",
//SOLVERS
                "ALPHAECP",
                "AMPL",
                "ANTIGONE",
                "BARON",
                "BDMLP",
                "BENCH",
                "BONMIN",
                "BONMINH",
                "CBC",
                "CONOPT",
                "CONVERT",
                "COUENNE",
                "CPLEX",
                "DE",
                "DECIS",
                "DECISC",
                "DECISM",
                "DICOPT",
                "EXAMINER",
                "GAMSCHK",
                "GLOMIQO",
                "GUROBI",
                "IPOPT",
                "IPOPTH",
                "JAMS",
                "KNITRO",
                "LGO",
                "LINDO",
                "LINDOGLOBAL",
                "LINGO",
                "LOGMIP",
                "LS",
                "MILES",
                "MINOS",
                "MOSEK",
                "MPECDUMP",
                "MPSGE",
                "MSNLP",
                "NLPEC",
                "OQNLP",
                "OS",
                "OSICPLEX",
                "OSIGUROBI",
                "OSIMOSEK",
                "OSIMOSEK",
                "OSIXPRESS",
                "OSIXPRESS",
                "PATH",
                "PATHNLP",
                "SBB",
                "SCIP",
                "SNOPT",
                "SOPLEX",
                "SULUM",
                "XA",
                "XPRESS",
//Functions

                { "trigger": "abs(x)", "contents": "ABS($1)" },
                { "trigger": "arccos(x)", "contents": "ARCCOS($1)" },
                { "trigger": "arcsin(x)", "contents": "ARCSIN($1)" },
                { "trigger": "arctan(x)", "contents": "ARCTAN($1)" },
                { "trigger": "arctan2(x,y)", "contents": "ARCTAN2($1,$2)" },
                { "trigger": "beta(x,y)", "contents": "BETA($1,$2)" },
                { "trigger": "betareg(x,y,z)", "contents": "BETAREG($1,$2,$3)" },
                { "trigger": "binomial(n,k)", "contents": "BINOMIAL($1,$2)" },
                { "trigger": "ceil(x)", "contents": "CEIL($1,$2)" },
                { "trigger": "centropy(x,y[,z])", "contents": "CENTROPY($1,$2)" },
                { "trigger": "cos(x)", "contents": "COS($1)" },
                { "trigger": "cosh(x)", "contents": "COSH($1)" },
                { "trigger": "cvPower(X,y)", "contents": "cvPower($1,$2)" },
                { "trigger": "div(dividend,divisor)", "contents": "DIV($1,$2)" },
                { "trigger": "div0(dividend,divisor)", "contents": "DIV0($1,$2)" },
                { "trigger": "eDist(x1[,x2,x3,x4,x5,x6])", "contents": "eDist($1,$2)" },
                { "trigger": "entropy(x)", "contents": "ENTROPY($1)" },
                { "trigger": "errorf(x)", "contents": "ERRORF($1)" },
                { "trigger": "execSeed", "contents": "execSeed" },
                { "trigger": "exp", "contents": "EXP($1)" },
                { "trigger": "exp(x)", "contents": "EXP($1)" },
                { "trigger": "fact(N)", "contents": "fact($1)" },
                { "trigger": "floor(x)", "contents": "FLOOR($1)" },
                { "trigger": "frac(x)", "contents": "frac($1)" },
                { "trigger": "gamma(x)", "contents": "gamma($1)" },
                { "trigger": "gammaReg(x,a)", "contents": "EXP($1,$2)" },
                { "trigger": "log(x)", "contents": "log($1)" },
                { "trigger": "log10(x)", "contents": "log10($1)" },
                { "trigger": "log2(x)", "contents": "log2($1)" },
                { "trigger": "logBeta(x)", "contents": "logBeta($1,$2)" },
                { "trigger": "logGamma(x)", "contents": "logGamma($1)" },
                { "trigger": "mapVal(x)", "contents": "mapVal($1)" },
                { "trigger": "max(x1,x2,x3,...)", "contents": "MAX($1,$2)" },
                { "trigger": "min(x1,x2,x3,...)", "contents": "MIN($1,$2)" },
                { "trigger": "mod(x,y)", "contents": "MOD($1,$2)" },
                { "trigger": "ncpCM(x,y,Z)", "contents": "ncpCM($1,$2,$3)" },
                { "trigger": "ncpF(x,y[,Z])", "contents": "ncpCM($1,$2)" },
                { "trigger": "ncpVUpow(r,s[,MU])", "contents": "ncpVUpow($1,$2)" },
                { "trigger": "ncpVUsin(r,s[,MU])", "contents": "ncpVUsin($1,$2)" },
                { "trigger": "ncpVUsin(r,s[,MU])", "contents": "ncpVUsin($1,$2)" },
                { "trigger": "normal(MEAN,STDDEV)", "contents": "normal($1,$2)" },
                { "trigger": "pi 3.14159265359", "contents": "pi" },
                { "trigger": "poly(x,A0,A1,A2[,A3,A4])", "contents": "poly($1,$2,$3,$4)" },
                { "trigger": "power(x,Y)", "contents": "power($1,$2)" },
                { "trigger": "randBinomial(N,P)", "contents": "randBinomial($1,$2)" },
                { "trigger": "randLinear(LOW,SLOPE,HIGH)", "contents": "randLinear($1,$2,$3)" },
                { "trigger": "randTriangle(LOW,MID,HIGH)", "contents": "randTriangle($1,$2,$3)" },
                { "trigger": "round(x[,DECPL])", "contents": "round($1)" },
                { "trigger": "rPower(x,y)", "contents": "rPower($1,$2)" },
                { "trigger": "sigmoid(x)", "contents": "sigmoid($1)" },
                { "trigger": "sign(x)", "contents": "sign($1)" },
                { "trigger": "signPower(x,Y)", "contents": "signPower($1,$2)" },
                { "trigger": "sin(x)", "contents": "sin($1)" },
                { "trigger": "sinh(x)", "contents": "sinh($1)" },
                { "trigger": "slexp(x[,SP])", "contents": "slexp($1)" },
                { "trigger": "sllog10(x[,SP])", "contents": "sllog10($1)" },
                { "trigger": "slrec(x[,SP])", "contents": "slrec($1)" },
                { "trigger": "sqexp(x[,SP])", "contents": "sqexp($1)" },
                { "trigger": "sqlog10(x[,SP])", "contents": "sqlog10($1)" },
                { "trigger": "sqr(x)", "contents": "sqr($1)" },
                { "trigger": "sqrec(x[,SP])", "contents": "sqrec($1)" },
                { "trigger": "sqrt(x)", "contents": "sqrt($1)" },
                { "trigger": "tan(x)", "contents": "tan($1)" },
                { "trigger": "tanh(x)", "contents": "tanh($1)" },
                { "trigger": "trunc(x)", "contents": "trunc($1)" },
                { "trigger": "uniform(LOW,HIGH)", "contents": "uniform($1,$2)" },
                { "trigger": "uniformInt(LOW,HIGH)", "contents": "uniformInt($1,$2)" },
                { "trigger": "vcPower(x,Y)", "contents": "vcPower($1,$2)" },
                { "trigger": "ifthen", "contents": "IFTHEN($1,$2,$3)" },
                { "trigger": "prod", "contents": "PROD($1,$2)" },
                { "trigger": "smax", "contents": "SMAX($1,$2)" },
                { "trigger": "smin", "contents": "SMIN($1,$2)" },
                { "trigger": "sum", "contents": "SUM($1,$2)" },
//Special values
                "INF",
                "NA",
                "EPS",
                "UNDF",
                "YES",
                "NO",
//Other                 
                { "trigger": "ORD(set)", "contents": "ORD(${1:set})" },
                { "trigger": "CARD(set)", "contents": "CARD(${1:set})" },
                { "trigger": "$INCLUDE filename", "contents": "\\$INCLUDE ${1:filename}" },
                { "trigger": "$ONTEXT", "contents": "\\$ONTEXT" },
                { "trigger": "$ONTEXT ... $OFFTEXT", "contents": "\\$ONTEXT\n${1:comment}\n\\$OFFTEXT" },
                { "trigger": "$OFFTEXT", "contents": "\\$OFFTEXT $0" },
                { "trigger": "$ONECHO > filename", "contents": "\\$ONECHO > ${1:filename}\n${2:filecontent}\n\\$OFFECHO;" },
                { "trigger": "$OFFECHO", "contents": "\\$OFFECHO;" },
                { "trigger": "LOOP(set,instructions);", "contents": "loop(${1:set},\n${2:instructions}\n);" },
                { "trigger": "abort", "contents": "ABORT\\$($1) '$2';" },
                { "trigger": "execute_unload", "contents": "EXECUTE_UNLOAD '$0';" },
                "DISPLAY $0;"


        ]
}